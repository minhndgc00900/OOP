- Overloading:

+ Providing 2 or more separates methods in a class with the same name
but different parameters

+ Method return type may or may not be different that allow us to reuse the
same method name

+ "Overloading" help reduces duplicated code and we dont have to remember
multiple method names

+ It has nothing to do with polymorphism but Java devs often refers it as
Compile Time Polymorphism

+ We can overload static and instance methods

+ It usually happen overloading inside a single class, but a method can also be
treated as overloaded in the subclass of that class.

+ Overloading method must have same name, different parameters

+ Overloading method may have different return types, access modifiers (private,public,protected)


- Overriding:

+ Overriding means defining a method in a child class that already existed in
a parent class with the same name and parameters.

+ To override a behaviour which the class has inherited from the parent class

+ Overriding is also known as Runtime polymorphism and dynamic method dispatch,
because the method that's going to be called is decided at run time by the JVM.

+ "Overriding" method must have same name and arguements

+ return type can be a subclass of the return type in the parent class

+ can't have lower access modifier.
ex: using private in the child is not allowed but using public in the
child would be allowed

+ Only inherited can be overridden (not either constructor or private methods)

+ methods that are final cannot be overridden

+ a sub-class can super.methodName() to call the super class version of an overridden method